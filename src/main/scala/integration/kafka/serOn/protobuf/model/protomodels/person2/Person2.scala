// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protomodels.person2

@SerialVersionUID(0L)
final case class Person2(
    name: _root_.scala.Predef.String,
    id: _root_.scala.Int,
    email: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    phones: _root_.scala.Seq[protomodels.person2.Person2.PhoneNumber2] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Person2] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      
      {
        val __value = id
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      if (email.isDefined) {
        val __value = email.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      phones.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = name
        _output__.writeString(1, __v)
      };
      
      {
        val __v = id
        _output__.writeInt32(2, __v)
      };
      email.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      phones.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): Person2 = copy(name = __v)
    def withId(__v: _root_.scala.Int): Person2 = copy(id = __v)
    def getEmail: _root_.scala.Predef.String = email.getOrElse("")
    def clearEmail: Person2 = copy(email = _root_.scala.None)
    def withEmail(__v: _root_.scala.Predef.String): Person2 = copy(email = Option(__v))
    def clearPhones = copy(phones = _root_.scala.Seq.empty)
    def addPhones(__vs: protomodels.person2.Person2.PhoneNumber2*): Person2 = addAllPhones(__vs)
    def addAllPhones(__vs: Iterable[protomodels.person2.Person2.PhoneNumber2]): Person2 = copy(phones = phones ++ __vs)
    def withPhones(__v: _root_.scala.Seq[protomodels.person2.Person2.PhoneNumber2]): Person2 = copy(phones = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => name
        case 2 => id
        case 3 => email.orNull
        case 4 => phones
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PInt(id)
        case 3 => email.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(phones.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protomodels.person2.Person2
}

object Person2 extends scalapb.GeneratedMessageCompanion[protomodels.person2.Person2] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protomodels.person2.Person2] = this
  def merge(`_message__`: protomodels.person2.Person2, `_input__`: _root_.com.google.protobuf.CodedInputStream): protomodels.person2.Person2 = {
    var __name = `_message__`.name
    var __id = `_message__`.id
    var __email = `_message__`.email
    val __phones = (_root_.scala.collection.immutable.Vector.newBuilder[protomodels.person2.Person2.PhoneNumber2] ++= `_message__`.phones)
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var __requiredFields0: _root_.scala.Long = 0x3L
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
          __requiredFields0 &= 0xfffffffffffffffeL
        case 16 =>
          __id = _input__.readInt32()
          __requiredFields0 &= 0xfffffffffffffffdL
        case 26 =>
          __email = Option(_input__.readStringRequireUtf8())
        case 34 =>
          __phones += _root_.scalapb.LiteParser.readMessage(_input__, protomodels.person2.Person2.PhoneNumber2.defaultInstance)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
    protomodels.person2.Person2(
        name = __name,
        id = __id,
        email = __email,
        phones = __phones.result(),
        unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protomodels.person2.Person2] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protomodels.person2.Person2(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Int],
        email = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        phones = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[protomodels.person2.Person2.PhoneNumber2]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Person2Proto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Person2Proto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = protomodels.person2.Person2.PhoneNumber2
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.protomodels.person2.Person2.PhoneNumber2
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protomodels.person2.Person2(
    name = "",
    id = 0,
    email = _root_.scala.None,
    phones = _root_.scala.Seq.empty
  )
  sealed abstract class PhoneType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = PhoneType
    def isMobile: _root_.scala.Boolean = false
    def isHome: _root_.scala.Boolean = false
    def isWork: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[PhoneType] = protomodels.person2.Person2.PhoneType
    final def asRecognized: _root_.scala.Option[protomodels.person2.Person2.PhoneType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[protomodels.person2.Person2.PhoneType.Recognized])
  }
  
  object PhoneType extends _root_.scalapb.GeneratedEnumCompanion[PhoneType] {
    sealed trait Recognized extends PhoneType
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[PhoneType] = this
    @SerialVersionUID(0L)
    case object MOBILE extends PhoneType(0) with PhoneType.Recognized {
      val index = 0
      val name = "MOBILE"
      override def isMobile: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HOME extends PhoneType(1) with PhoneType.Recognized {
      val index = 1
      val name = "HOME"
      override def isHome: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WORK extends PhoneType(2) with PhoneType.Recognized {
      val index = 2
      val name = "WORK"
      override def isWork: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends PhoneType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(MOBILE, HOME, WORK)
    def fromValue(__value: _root_.scala.Int): PhoneType = __value match {
      case 0 => MOBILE
      case 1 => HOME
      case 2 => WORK
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = protomodels.person2.Person2.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = protomodels.person2.Person2.scalaDescriptor.enums(0)
  }
  @SerialVersionUID(0L)
  final case class PhoneNumber2(
      number: _root_.scala.Predef.String,
      `type`: _root_.scala.Option[protomodels.person2.Person2.PhoneType] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PhoneNumber2] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = number
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        };
        if (`type`.isDefined) {
          val __value = `type`.get.value
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        
        {
          val __v = number
          _output__.writeString(1, __v)
        };
        `type`.foreach { __v =>
          val __m = __v.value
          _output__.writeEnum(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def withNumber(__v: _root_.scala.Predef.String): PhoneNumber2 = copy(number = __v)
      def getType: protomodels.person2.Person2.PhoneType = `type`.getOrElse(protomodels.person2.Person2.PhoneType.HOME)
      def clearType: PhoneNumber2 = copy(`type` = _root_.scala.None)
      def withType(__v: protomodels.person2.Person2.PhoneType): PhoneNumber2 = copy(`type` = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => number
          case 2 => `type`.map(_.javaValueDescriptor).orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(number)
          case 2 => `type`.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = protomodels.person2.Person2.PhoneNumber2
  }
  
  object PhoneNumber2 extends scalapb.GeneratedMessageCompanion[protomodels.person2.Person2.PhoneNumber2] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protomodels.person2.Person2.PhoneNumber2] = this
    def merge(`_message__`: protomodels.person2.Person2.PhoneNumber2, `_input__`: _root_.com.google.protobuf.CodedInputStream): protomodels.person2.Person2.PhoneNumber2 = {
      var __number = `_message__`.number
      var __type = `_message__`.`type`
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var __requiredFields0: _root_.scala.Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __number = _input__.readStringRequireUtf8()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __type = Option(protomodels.person2.Person2.PhoneType.fromValue(_input__.readEnum()))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      protomodels.person2.Person2.PhoneNumber2(
          number = __number,
          `type` = __type,
          unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[protomodels.person2.Person2.PhoneNumber2] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        protomodels.person2.Person2.PhoneNumber2(
          number = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
          `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => protomodels.person2.Person2.PhoneType.fromValue(__e.number))
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = protomodels.person2.Person2.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = protomodels.person2.Person2.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => protomodels.person2.Person2.PhoneType
      }
    }
    lazy val defaultInstance = protomodels.person2.Person2.PhoneNumber2(
      number = "",
      `type` = _root_.scala.None
    )
    implicit class PhoneNumber2Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protomodels.person2.Person2.PhoneNumber2]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protomodels.person2.Person2.PhoneNumber2](_l) {
      def number: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.number)((c_, f_) => c_.copy(number = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, protomodels.person2.Person2.PhoneType] = field(_.getType)((c_, f_) => c_.copy(`type` = Option(f_)))
      def optionalType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[protomodels.person2.Person2.PhoneType]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    }
    final val NUMBER_FIELD_NUMBER = 1
    final val TYPE_FIELD_NUMBER = 2
    def of(
      number: _root_.scala.Predef.String,
      `type`: _root_.scala.Option[protomodels.person2.Person2.PhoneType],
      unknownFields: _root_.scalapb.UnknownFieldSet
    ): _root_.protomodels.person2.Person2.PhoneNumber2 = _root_.protomodels.person2.Person2.PhoneNumber2(
      number,
      `type`,
      unknownFields
    )
  }
  
  implicit class Person2Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protomodels.person2.Person2]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protomodels.person2.Person2](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def email: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEmail)((c_, f_) => c_.copy(email = Option(f_)))
    def optionalEmail: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def phones: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[protomodels.person2.Person2.PhoneNumber2]] = field(_.phones)((c_, f_) => c_.copy(phones = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
  final val PHONES_FIELD_NUMBER = 4
  def of(
    name: _root_.scala.Predef.String,
    id: _root_.scala.Int,
    email: _root_.scala.Option[_root_.scala.Predef.String],
    phones: _root_.scala.Seq[protomodels.person2.Person2.PhoneNumber2],
    unknownFields: _root_.scalapb.UnknownFieldSet
  ): _root_.protomodels.person2.Person2 = _root_.protomodels.person2.Person2(
    name,
    id,
    email,
    phones,
    unknownFields
  )
}
